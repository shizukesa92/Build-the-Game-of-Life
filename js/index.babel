/*var board = [],
	population = 0,
	height = 100,
	width = 80,
	size = height * width;

$(document).ready(() => {
	$("#generation").text("0");
	clearCells();
	generateCells();
});

const clearCells = () => {
	board = [];
	for (let x = 0; x < size; x++) {
		board[x] = {
			id: x,
			status: "cell dead"
		};
	}
	population = 0;
	$("#generation").text("0");
};

const generateCells = () => {
	$("#squares").empty();

	class Cells extends React.Component {
		constructor(props) {
			super(props);
		}
		render() {
			return (<div>
							{this.props.board.map((cell, i)=> {
						return(<div className={cell.status} key={i} id={i}></div>);
					})
					}
				</div>

			);
		}
	}
	ReactDOM.render(<Cells board={board} population={population}/>, document.getElementById("squares"));

}*/

class Buttons extends React.Component {
	changeSize = (event) => {
		var height = 0,
			width = 0;
		switch (event.target.id) {
			case "5030":
				height = 45,
					width = 27;
				break;
			case "7050":
				height = 63,
					width = 45;
				break;
			default:
				height = 90,
					width = 72;
		}
		this.props.change(height, width); //Need to fix this
		this.props.regen();
	}

	render() {
		return (<div><p>Board Size</p><button type="button" onClick = {this.changeSize} id = "5030">50 x 30</button><button type="button" onClick = {this.changeSize} id = "7050">70x50</button><button type="button" onClick = {this.changeSize} id = {10080}>100x80</button></div>)
	}
}

class Cells extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			board: [],
		}
	}

	componentWillMount = () => {
		var board = [];
		for (let x = 0; x < this.props.size; x++) {
			board[x] = {
				id: x,
				status: "cell dead"
			};
		}
		$("#generation").text("0");

		this.setState({
			board: board
		})
	}

	changeSize = () => {
		this.props.changeSize(height, width);
	}
	render() {
		ReactDOM.render(<Buttons change = {this.changeSize} regen = {this.componentWillMount}/>, document.getElementById("size"));

		return (<div>{this.state.board.map((cell, i)=> {
						return(<div className={cell.status} key={i} id={i}></div>);
		})
		}</div>)



	}

}

class Board extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			height: 100,
			width: 80
		}
	}

	changeSize = (height, width) => {
		$("#squares").css("height", height + "vh");
		$("#squares").css("width", width + "vw");
		$("#board").css("height", height + 2 + "vh");
		$("#board").css("width", width + 2 + "vw");


		this.setState({
			height: height,
			width: width,
		})
	}
	render() {
		const size = this.state.height * this.state.width;
		return (
			<Cells size = {size} change = {this.changeSize}/>
		);
	}

}
ReactDOM.render(<Board />, document.getElementById("squares"));
