/*var cells = document.getElementsByClassName("cell"),
  columns = 0;

if (cells.length == 7999) {
	gameBig();
	columns = 80;
} else if (cells.length == 3499) {
	gameMedium();
	columns = 50;
} else {
	gameSmall();
	columns = 30;
}


var edge = [0,columns-1,cells.length-1-columns,cells.length-1], 
surroundingTop = [],
surroundingBottom =[],
surroundingLeft =[],
surroundingRight =[];

for (let x = 1; x<columns-1; x++) {
surroundingTop.push(x);
}

for (let x = cells.length-columns; x<cells.length-1; x++) {
surroundingBottom.push(x);
}

for (let x = columns; x<=cells.length-columns*2; x+columns) {
surroundingLeft.push(x);
}
for (let x = columns*2-1; x<=cells.length-columns-1; x+columns) {
surroundingRight.push(x);
}

for (let x = 0;x<cells.length; x++){

if(surroundingTop.indexOf(x) == -1 && surroundingBottom.indexOf(x) == -1 && surroundingLeft.indexOf(x) == -1 && surroundingRight.indexOf(x) == -1 && edge.indexOf(x) == -1){
normal.push(x);
}


for (let x = 0; x < surroundingTop.length; x++){
var neighbours = [],
alive =0;

switch(cells[x].id) {
	case surroundingTop.indexOf(x)>0:
neighbours.push(cells[surroundingTop[x]-1].id,cells[surroundingTop[x]+1].id,cells[surroundingTop[x]+columns].id,cells[surroundingTop[x]+columns-1].id,cells[surroundingTop[x]+columns+1].id);

        break;
	case surroundingBottom.indexOf(x)>0:
neighbours.push(cells[surroundingBottom[x]-1].id,cells[surroudingBottom[x]+1].id,cells[surroudingBottom[x]-columns].id,cells[surroudingBottom[x]-columns+1].id,cells[surroudingBottom[x]-columns-1].id);

        break;
	case surroundingLeft.indexOf(x)>0:
neighbours.push(cells[surroudingLeft[x]+1].id,cells[surroundingLeft[x]+columns].id,cells[surroundingLeft[x]-columns].id,cells[surroundingLeft[x]-columns+1].id,cells[surroundingLeft[x]+columns+1].id);

        break;
	case surroundingRight.indexOf(x)>0:
neighbours.push(cells[surroudingRight[x]-1].id,cells[surroundingRight[x]+columns].id,cells[surroundingRight[x]-columns].id,cells[surroundingRight[x]+columns-1].id,cells[surroundingRight[x]-columns-1].id);

        break;
	case normal.indexOf(x)>0:
neighbours.push(cells[normal-1].id,cells[normal+1].id,cells[normal+columns].id,cells[normal-columns].id,cells[normal+columns-1].id,cells[normal-columns+1].id,cells[normal+columns+1].id,cells[normal-columns-1].id);

		break;
	case 1:
neighbours.push(cells[1].id,cells[columns].id,cells[columns+1].id);

		break;
			case columns-1-1:
        code block
        break;
	case surroundingRight.indexOf(x)>0:
neighbours.push(cells[columns-1-1].id,cells[columns-1+columns].id,cells[columns-1+columns-1].id);

        break;
	case cells.length-columns+1+1:
neighbours.push(cells[cells.length-columns+1+1].id,cells[cells.length-columns+1-columns].id,cells[cells.length-columns+1-columns+1].id);

		break;
	case cells.length-1-1:
neighbours.push(cells[cells.length-1-1].id,cells[cells.length-1-columns].id,cells[cells.length-1-columns-1].id);

		break;
}

for (let y =0; y< neighbours.length; y++){
if (cells[neighbours[y]].status == "alive"){
alive++;
}
if (cells[surroundingTop[x]].status == "alive" ){
	if (alive < 2 or alive >3){
	cells[surroundingTop[x]].status == "dead"
	
	}
	}
} else {
if (alive == 3){
cells[surroundingTop[x]].status == "alive";
}

}



}


}


cells[surroundingBottom[x]-1].id,cells[surroudingBottom[x]+1].id,cells[surroudingBottom[x]-columns].id,cells[surroudingBottom[x]-columns+1].id,cells[surroudingBottom[x]-columns-1].id
cells[surroundingTop[x]-1].id,cells[surroundingTop[x]+1].id,cells[surroundingTop[x]+columns].id,cells[surroundingTop[x]+columns-1].id,cells[surroundingTop[x]+columns+1].id
cells[surroudingLeft[x]+1].id,cells[surroundingLeft[x]+columns].id,cells[surroundingLeft[x]-columns].id,cells[surroundingLeft[x]-columns+1].id,cells[surroundingLeft[x]+columns+1].id
cells[surroudingRight[x]-1].id,cells[surroundingRight[x]+columns].id,cells[surroundingRight[x]-columns].id,cells[surroundingRight[x]+columns-1].id,cells[surroundingRight[x]-columns-1].id
cells[1].id,cells[columns].id,cells[columns+1].id
cells[columns-1-1].id,cells[columns-1+columns].id,cells[columns-1+columns-1].id
cells[cells.length-columns+1+1].id,cells[cells.length-columns+1-columns].id,cells[cells.length-columns+1-columns+1].id
cells[cells.length-1-1].id,cells[cells.length-1-columns].id,cells[cells.length-1-columns-1].id


		*/

class Cells extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			life: "dead"
		}
	}

	setAlive = () => {
		this.state.life == "dead" ?
			this.setState({
				life: "alive"
			}) :
			this.setState({
				life: "dead"
			})
	}

	render() {
		return (<div className={"cell " + this.state.life} key={this.props.key} id={this.props.id} onClick = {this.setAlive}></div>)
	}

}

class Buttons extends React.Component {
	changeSize = (event) => {
		var height = 0,
			width = 0,
			size = 0;
		switch (event.target.id) {
			case "5030":
				height = 50,
					width = 30,
					size = 1500;
				break;
			case "7050":
				height = 70,
					width = 50,
					size = 3500;
				break;
			default:
				height = 100,
					width = 80,
					size = 8000;
		}

		this.props.change(height, width, size);
	}

	render() {
		return (<div><p>Board Size</p><button type="button" onClick = {this.changeSize} id = "5030">50 x 30</button><button type="button" onClick = {this.changeSize} id = "7050">70x50</button><button type="button" onClick = {this.changeSize} id = {10080}>100x80</button></div>)
	}
}

class Board extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			height: 100,
			width: 80,
			size: 8000,
			board: []
		}
	}


	componentWillMount = () => {

		var board = [];
		for (let x = 0; x < this.state.size; x++) {
			board[x] = {
				id: x,
			};
		}
		$("#generation").text("0");

		this.setState({
			board: board
		})
	}

	changeSize = (height, width, size) => {
		$("#squares").css("height", height * 0.9 + "vh");
		$("#squares").css("width", width * 0.9 + "vw");
		$("#board").css("height", height * 0.9 + 2 + "vh");
		$("#board").css("width", width * 0.9 + 2 + "vw");

		var board = [];
		for (let x = 0; x < size; x++) {
			board[x] = {
				id: x,
				status: "cell dead"
			};
		}
		$("#generation").text("0");
		this.setState({
			height: height,
			width: width,
			size: size,
			board: board
		})
	}
	render() {
		ReactDOM.render(<Buttons change = {this.changeSize}/>, document.getElementById("size"));
		return (
			<div>{this.state.board.map((cell, i)=> {
					return(<Cells id = {i} key = {i}/>);
		})
		}</div>);
	}

}
ReactDOM.render(<Board />, document.getElementById("squares"));
