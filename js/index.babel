var board = [];

class Game extends React.Component {
	living = (id) => {
		var columns = 0,
			count = 0,
			border = 0;

		if (board.length == 8000) {
			columns = 80;
		} else if (board.length == 8000) {
			columns = 50;
		} else {
			columns = 30;
		}

		if (id == 0) {
			border = 1;
			if (board[id + 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id + columns + 1].status == "alive") {
				count++;
			}
			return count;
		}

		if (id == board.length - 1) {
			border = 1;
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns - 1].status == "alive") {
				count++;
			}

			return count;
		}

		if (id == board.length - columns) {
			border = 1;
			if (board[id + 1].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns + 1].status == "alive") {
				count++;
			}

			return count;
		}

		if (id == columns - 1) {
			border = 1;
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id + columns - 1].status == "alive") {
				count++;
			}

			return count;
		}


		//Top border
		if (id >= 0 && id <= (columns - 1)) {
			border = 1;
			if (board[id + 1].status == "alive") {
				count++;
			}
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id + columns + 1].status == "alive") {
				count++;
			}
			if (board[id + columns - 1].status == "alive") {
				count++;
			}

			return count;
		}

		//Bottom border
		if (id >= (board.length - columns) && id <= (board.length - 1)) {
			border = 1;
			if (board[id + 1].status == "alive") {
				count++;
			}
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns + 1].status == "alive") {
				count++;
			}
			if (board[id - columns - 1].status == "alive") {
				count++;
			}

			return count;
		}

		//Right border
		if ((id + 1) % columns == 0) {
			border = 1;
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns - 1].status == "alive") {
				count++;
			}
			if (board[id + columns - 1].status == "alive") {
				count++;
			}

			return count;
		}

		//Left border
		if (id % columns == 0) {
			border = 1;

			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns + 1].status == "alive") {
				count++;
			}
			if (board[id + columns + 1].status == "alive") {
				count++;
			}

			return count;
		}

		//Normal
		if (border == 0) {

			if (board[id + 1].status == "alive") {
				count++;
			}
			if (board[id - 1].status == "alive") {
				count++;
			}
			if (board[id + columns].status == "alive") {
				count++;
			}
			if (board[id + columns + 1].status == "alive") {
				count++;
			}
			if (board[id + columns - 1].status == "alive") {
				count++;
			}
			if (board[id - columns].status == "alive") {
				count++;
			}
			if (board[id - columns + 1].status == "alive") {
				count++;
			}
			if (board[id - columns - 1].status == "alive") {
				count++;
			}

			return count;
		}
	}

	game = () => {
		for (let x = 0; x < board.length; x++) {
			const count = this.living(x);
			if (board[x].status == "dead" && count == 3) {
				board[x].status = "alive";
				document.getElementById(x).className = "cell " + "alive";
			}
			if (board[x].status == "alive") {
				if (count < 2 || count > 3) {
					board[x].status = "dead";
					document.getElementById(x).className = "cell " + "dead";
				} else if (count == 3) {
					board[x].status = "alive";
					document.getElementById(x).className = "cell " + "alive";
				}
			}
		}

	}

	render() {
		return (<div><button type="button" id="run" onClick = {this.game}>Run</button><button type="button" id="pause">Pause</button><button type="button" id="clear">Clear</button><p>Generation: <span id="generation"></span></p></div>);
	}

}


class Cells extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			life: "dead"
		}
	}



	setAlive = (event) => {
		const id = event.target.id;
		this.state.life == "dead" ?
			(this.setState({
				life: "alive"
			}), board[id].status = "alive") :
			(this.setState({
				life: "dead"
			}), board[id].status = "dead")

	}

	render() {
		ReactDOM.render(<Game toggle = {this.setAlive} />, document.getElementById("top-bar"));
		return (<div className={"cell " + this.state.life} id={this.props.id} onClick = {this.setAlive}></div>)
	}

}

class Buttons extends React.Component {
	changeSize = (event) => {
		var height = 0,
			width = 0,
			size = 0;
		switch (event.target.id) {
			case "5030":
				height = 50,
					width = 30,
					size = 1500;
				break;
			case "7050":
				height = 70,
					width = 50,
					size = 3500;
				break;
			default:
				height = 100,
					width = 80,
					size = 8000;
		}

		this.props.change(height, width, size);
	}

	render() {
		return (<div><p>Board Size</p><button type="button" onClick = {this.changeSize} id = "5030">50 x 30</button><button type="button" onClick = {this.changeSize} id = "7050">70x50</button><button type="button" onClick = {this.changeSize} id = {10080}>100x80</button></div>)
	}
}

class Board extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			height: 100,
			width: 80,
			size: 8000,
		}
	}


	componentWillMount = () => {

		board = [];
		for (let x = 0; x < this.state.size; x++) {
			board[x] = {
				id: x,
				status: "dead"
			};
		}
		$("#generation").text("0");

		this.setState({
			board: board
		})
	}

	changeSize = (height, width, size) => {
		$("#squares").css("height", height * 0.9 + "vh");
		$("#squares").css("width", width * 0.9 + "vw");
		$("#board").css("height", height * 0.9 + 2 + "vh");
		$("#board").css("width", width * 0.9 + 2 + "vw");

		board = [];
		for (let x = 0; x < size; x++) {
			board[x] = {
				id: x,
				status: "dead"
			};
		}
		$("#generation").text("0");
		this.setState({
			height: height,
			width: width,
			size: size,
			board: board
		})
	}
	render() {
		ReactDOM.render(<Buttons change = {this.changeSize}/>, document.getElementById("size"));
		return (
			<div>{this.state.board.map((cell, i)=> {
					return(<Cells id = {i} />);
		})
		}</div>);
	}

}
ReactDOM.render(<Board />, document.getElementById("squares"));
